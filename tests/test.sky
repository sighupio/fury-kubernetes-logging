def test_api_version():
    api_version = spec["apiVersion"]
    result = api_version in ["v1", "apps/v1", "batch/v1beta1", "monitoring.coreos.com/v1", "rbac.authorization.k8s.io/v1", "apiextensions.k8s.io/v1beta1"]
    assert_true(result, "apiVersion %s is not allowed" % api_version)


def test_latest_tag():
    if spec["kind"] in ["DaemonSet", "Deployment", "Job", "StatefulSet"]:
        for container in spec["spec"]["template"]["spec"].get("initContainers", []):
            image = container["image"]
            tag = image.split(":")[-1]
            assert_not_equal(tag, "latest", "%s should not use latest images" % image)

        for container in spec["spec"]["template"]["spec"]["containers"]:
            image = container["image"]
            tag = image.split(":")[-1]
            assert_not_equal(tag, "latest", "%s should not use latest images" % image)

    if spec["kind"] == "Pod":
        for container in spec["spec"]["template"]["spec"].get("initContainers", []):
            image = container["image"]
            tag = image.split(":")[-1]
            assert_not_equal(tag, "latest", "%s should not use latest images" % image)

        for container in spec["spec"]["containers"]:
            image = container["image"]
            tag = image.split(":")[-1]
            assert_not_equal(tag, "latest", "%s should not use latest images" % image)

    if spec["kind"] == "CronJob":
        for container in spec["spec"]["jobTemplate"]["spec"]["template"]["spec"].get("initContainers", []):
            image = container["image"]
            tag = image.split(":")[-1]
            assert_not_equal(tag, "latest", "%s should not use latest images" % image)

        for container in spec["spec"]["jobTemplate"]["spec"]["template"]["spec"]["containers"]:
            image = container["image"]
            tag = image.split(":")[-1]
            assert_not_equal(tag, "latest", "%s should not use latest images" % image)


def test_default_namespace():
    name = spec["metadata"]["name"]
    namespace = spec["metadata"].get("namespace", "")
    assert_not_equal(namespace, "default", "%s should not use default namespace" % name)

def test_service_type():
    name = spec["metadata"]["name"]
    if spec["kind"] == "Service":
        service_type = spec["spec"].get("type", "ClusterIP")
        result = service_type in ["ClusterIP", "NodePort"]
        assert_true(result, "service %s should not have type %s" % (name, service_type))


test_api_version()

test_latest_tag()

test_default_namespace()

test_service_type()

# vim: set ft=python:
