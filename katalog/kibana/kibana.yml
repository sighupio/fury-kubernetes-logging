# Copyright (c) 2020 SIGHUP s.r.l All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

---
kind: Service
apiVersion: v1
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  ports:
    - port: 5601
      name: http
      protocol: TCP
  selector:
    app: kibana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana
  labels:
    app: kibana
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: kibana
          image: docker.elastic.co/kibana/kibana
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - |
                  #!/usr/bin/env bash -e
                  http () {
                      local path="${1}"
                      set -- -XGET -s --fail -L
                      if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                        set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                      fi
                      STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                      if [[ "${STATUS}" -eq 200 ]]; then
                        exit 0
                      fi
                      echo "Error: Got HTTP code ${STATUS} but expected a 200"
                      exit 1
                  }
                  http /app/kibana
          ports:
            - containerPort: 5601
              name: http
          env:
            - name: ELASTICSEARCH_URL
              value: "http://elasticsearch:9200"
            - name: NODE_OPTIONS
              value: "--max-old-space-size=400"
            - name: MONITORING_UI_ENABLED
              value: "false"
            - name: APM_ENABLED
              value: "false"
            - name: TIMELION_ENABLE
              value: "false"
            - name: MAPS_ENABLED
              value: "false"
            - name: GRAPH_ENABLED
              value: "false"
            - name: INFRA_ENABLED
              value: "false"
            - name: CANVAS_ENABLED
              value: "false"
            - name: ML_ENABLED
              value: "false"
            - name: UPTIME_ENABLED
              value: "false"
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
            limits:
              cpu: "2"
              memory: 500Mi
        - name: kibana-index-patterns
          image: docker.elastic.co/kibana/kibana
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            runAsUser: 1000
          command:
           - sh
           - -c
           - |
             STATUS=000; while true; do if [[ "${STATUS}" -eq 000 ]]; then echo "Trying to put index patterns..."; STATUS=$(curl --output /dev/null --write-out "%{http_code}" -s -X POST "localhost:5601/api/saved_objects/_import?overwrite=true" -H "kbn-xsrf: true" --form file=@/usr/share/kibana/file.ndjson); echo "Operation status code: $STATUS"; fi; sleep 60; done
          env:
            - name: ELASTICSEARCH_URL
              value: "http://elasticsearch:9200"
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: "1"
              memory: 200Mi
          volumeMounts:
            - name: config-volume
              mountPath: /usr/share/kibana/file.ndjson
              subPath: file.ndjson
      volumes:
        - name: config-volume
          configMap:
            name: kibana-index-patterns-configmap
            items:
              - key: file.ndjson
                path: file.ndjson
