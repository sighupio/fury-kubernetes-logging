# Copyright (c) 2017-present SIGHUP s.r.l All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

name: check-license-header-presence
kind: pipeline
type: docker

clone:
  depth: 1

steps:
  - name: check
    image: docker.io/library/golang:1.21
    pull: always
    commands:
      - go install github.com/google/addlicense@v1.1.1
      - addlicense -c "SIGHUP s.r.l" -v -l bsd --check .

---
name: linting
kind: pipeline
type: docker

clone:
  depth: 1

depends_on:
  - check-license-header-presence

platform:
  os: linux
  arch: amd64

steps:
  - name: lint-policeman
    image: quay.io/sighup/policeman
    pull: always
    environment:
      # Identifies false positives like missing 'selector'.
      # Doing this is valid for Kustomize patches
      VALIDATE_KUBERNETES_KUBEVAL: "false"
      # Some duplicated code is intended.
      VALIDATE_JSCPD: "false"
      # hadolint already validated dockerfiles
      VALIDATE_DOCKERFILE: "false"
      # Disable natural language checks
      VALIDATE_NATURAL_LANGUAGE: "false"

    depends_on:
      - clone

  - name: render-manifests
    image: quay.io/sighup/e2e-testing:1.1.0_3.12.0_1.31.1_3.10.0_4.33.3
    pull: always
    depends_on:
      - clone
    commands:
      - kustomize build katalog/opensearch-triple > opensearch-triple.yml
      - kustomize build katalog/opensearch-dashboards > opensearch-dashboard.yml
      - kustomize build katalog/logging-operator > logging-operator.yml
      - kustomize build katalog/logging-operated > logging-operated.yml
      - kustomize build katalog/configs > configs.yml
      - kustomize build katalog/loki-configs > loki-configs.yml
      - kustomize build katalog/loki-distributed > loki-distributed.yml
      - kustomize build katalog/minio-ha > minio-ha.yml

  - &check-deprecated-apis
    name: check-deprecated-apis
    image: us-docker.pkg.dev/fairwinds-ops/oss/pluto:v5
    pull: always
    depends_on:
      - render-manifests
    commands:
      # we use --ignore-deprecations because we don't want the CI to fail when the API has not been removed yet.
      - /pluto detect $${KUBERNETES_MANIFESTS} --ignore-deprecations --target-versions=k8s=v1.29.0
    environment:
      KUBERNETES_MANIFESTS: opensearch-triple.yml

  - <<: *check-deprecated-apis
    name: check-deprecated-apis-logging-operator
    environment:
      KUBERNETES_MANIFESTS: logging-operator.yml

  - <<: *check-deprecated-apis
    name: check-deprecated-apis-logging-operated
    environment:
      KUBERNETES_MANIFESTS: logging-operated.yml

  - <<: *check-deprecated-apis
    name: check-deprecated-apis-configs
    environment:
      KUBERNETES_MANIFESTS: configs.yml

  - <<: *check-deprecated-apis
    name: check-deprecated-apis-opensearch-dashboard
    environment:
      KUBERNETES_MANIFESTS: opensearch-dashboard.yml

  - <<: *check-deprecated-apis
    name: check-deprecated-apis-loki-configs
    environment:
      KUBERNETES_MANIFESTS: loki-configs.yml

  - <<: *check-deprecated-apis
    name: check-deprecated-apis-loki-distributed
    environment:
      KUBERNETES_MANIFESTS: loki-distributed.yml

  - <<: *check-deprecated-apis
    name: check-deprecated-apis-minio-ha
    environment:
      KUBERNETES_MANIFESTS: minio-ha.yml

---
name: unit-tests
kind: pipeline
type: docker

clone:
  depth: 1

depends_on:
  - linting

platform:
  os: linux
  arch: amd64

steps:
  - name: katalog
    image: quay.io/sighup/katalog:3.2.2_3
    pull: always
    depends_on: [clone]
    commands:
      - flake8 --ignore=E501 katalog/tests/test.py
      - bash katalog/tests/pytest.sh
      - rm -rf .pytest_cache katalog/tests/__pycache__
    when:
      event:
        - push
---
name: e2e-kubernetes-1.28
kind: pipeline
type: docker

depends_on:
  - linting

clone:
  depth: 1

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    include:
      - refs/tags/**

steps:
  - name: Create Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.20.0_1.29.1_3.10.0
    pull: always
    depends_on: [clone]
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      KIND_CONFIG: ./katalog/tests/kind/config.yml
      CLUSTER_VERSION: v1.28.0
      KUBECONFIG: kubeconfig-128
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-128
    commands:
      # NOTE: kind's `--wait` flag that waits for the control-plane ot be ready
      # does not work when disabling the default CNI. It will always go in timeout.
      - kind create cluster --name $${CLUSTER_NAME} --image registry.sighup.io/fury/kindest/node:$${CLUSTER_VERSION} --config $${KIND_CONFIG}
      # save the kubeconfig so we can use it from other steps.
      - kind get kubeconfig --name $${CLUSTER_NAME} > $${KUBECONFIG}

  - name: End-to-End Tests
    # KUBECTL 1.25.3 - KUSTOMIZE 3.5.3 - HELM 3.1.1 - YQ 4.21.1 - ISTIOCTL 1.9.4 - FURYCTL 0.9.0 - BATS 1.1.0
    image: quay.io/sighup/e2e-testing:1.1.0_0.11.0_3.1.1_1.9.4_1.26.3_3.5.3_4.33.3
    pull: always
    network_mode: host
    environment:
      KUBECONFIG: kubeconfig-128
    depends_on: ["Create Kind Cluster"]
    commands:
      # wait for Kind cluster to be ready
      - until kubectl get serviceaccount default > /dev/null 2>&1; do echo "waiting for control-plane" && sleep 1; done
      - bats -t katalog/tests/tests.sh

  - name: Destroy Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.20.0_1.29.1_3.10.0
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-128
    commands:
      # does not matter if the command fails
      - kind delete cluster --name $${CLUSTER_NAME} || true
    depends_on:
      - End-to-End Tests
    when:
      status:
        - success
        - failure

volumes:
  - name: dockersock
    host:
      path: /var/run/docker.sock

---
name: e2e-kubernetes-1.29
kind: pipeline
type: docker

depends_on:
  - linting

clone:
  depth: 1

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    include:
      - refs/tags/**

steps:
  - name: Create Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.24.0_1.29.1_3.10.0
    pull: always
    depends_on: [clone]
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      KIND_CONFIG: ./katalog/tests/kind/config.yml
      CLUSTER_VERSION: v1.29.8
      KUBECONFIG: kubeconfig-129
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-129
    commands:
      # NOTE: kind's `--wait` flag that waits for the control-plane ot be ready
      # does not work when disabling the default CNI. It will always go in timeout.
      - kind create cluster --name $${CLUSTER_NAME} --image registry.sighup.io/fury/kindest/node:$${CLUSTER_VERSION} --config $${KIND_CONFIG}
      # save the kubeconfig so we can use it from other steps.
      - kind get kubeconfig --name $${CLUSTER_NAME} > $${KUBECONFIG}

  - name: End-to-End Tests
    # KUBECTL 1.25.3 - KUSTOMIZE 3.5.3 - HELM 3.1.1 - YQ 4.21.1 - ISTIOCTL 1.9.4 - FURYCTL 0.9.0 - BATS 1.1.0
    image: quay.io/sighup/e2e-testing:1.1.0_1.29.1_3.10.0_4.33.3
    pull: always
    network_mode: host
    environment:
      KUBECONFIG: kubeconfig-129
    depends_on: ["Create Kind Cluster"]
    commands:
      # wait for Kind cluster to be ready
      - until kubectl get serviceaccount default > /dev/null 2>&1; do echo "waiting for control-plane" && sleep 1; done
      - bats -t katalog/tests/tests.sh

  - name: Destroy Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.24.0_1.29.1_3.10.0
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-129
    commands:
      # does not matter if the command fails
      - kind delete cluster --name $${CLUSTER_NAME} || true
    depends_on:
      - End-to-End Tests
    when:
      status:
        - success
        - failure

volumes:
  - name: dockersock
    host:
      path: /var/run/docker.sock

---
name: e2e-kubernetes-1.30
kind: pipeline
type: docker

depends_on:
  - linting

clone:
  depth: 1

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    include:
      - refs/tags/**

steps:
  - name: Create Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.24.0_1.30.5_4.5.2
    pull: always
    depends_on: [clone]
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      KIND_CONFIG: ./katalog/tests/kind/config.yml
      CLUSTER_VERSION: v1.30.4
      KUBECONFIG: kubeconfig-130
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-130
    commands:
      # NOTE: kind's `--wait` flag that waits for the control-plane ot be ready
      # does not work when disabling the default CNI. It will always go in timeout.
      - kind create cluster --name $${CLUSTER_NAME} --image registry.sighup.io/fury/kindest/node:$${CLUSTER_VERSION} --config $${KIND_CONFIG}
      # save the kubeconfig so we can use it from other steps.
      - kind get kubeconfig --name $${CLUSTER_NAME} > $${KUBECONFIG}

  - name: End-to-End Tests
    image: quay.io/sighup/e2e-testing:1.1.0_3.12.0_1.30.5_3.10.0_4.33.3
    pull: always
    network_mode: host
    environment:
      KUBECONFIG: kubeconfig-130
    depends_on: ["Create Kind Cluster"]
    commands:
      # wait for Kind cluster to be ready
      - until kubectl get serviceaccount default > /dev/null 2>&1; do echo "waiting for control-plane" && sleep 1; done
      - bats -t katalog/tests/tests.sh

  - name: Destroy Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.24.0_1.30.5_4.5.2
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-130
    commands:
      # does not matter if the command fails
      - kind delete cluster --name $${CLUSTER_NAME} || true
    depends_on:
      - End-to-End Tests
    when:
      status:
        - success
        - failure

volumes:
  - name: dockersock
    host:
      path: /var/run/docker.sock
---
name: e2e-kubernetes-1.31
kind: pipeline
type: docker

depends_on:
  - linting

clone:
  depth: 1

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    include:
      - refs/tags/**

steps:
  - name: Create Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.24.0_1.31.1_4.5.2
    pull: always
    depends_on: [clone]
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      KIND_CONFIG: ./katalog/tests/kind/config.yml
      CLUSTER_VERSION: v1.31.1
      KUBECONFIG: kubeconfig-130
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-131
    commands:
      # NOTE: kind's `--wait` flag that waits for the control-plane ot be ready
      # does not work when disabling the default CNI. It will always go in timeout.
      - kind create cluster --name $${CLUSTER_NAME} --image registry.sighup.io/fury/kindest/node:$${CLUSTER_VERSION} --config $${KIND_CONFIG}
      # save the kubeconfig so we can use it from other steps.
      - kind get kubeconfig --name $${CLUSTER_NAME} > $${KUBECONFIG}

  - name: End-to-End Tests
    image: quay.io/sighup/e2e-testing:1.1.0_3.12.0_1.30.5_3.10.0_4.33.3
    pull: always
    network_mode: host
    environment:
      KUBECONFIG: kubeconfig-130
    depends_on: ["Create Kind Cluster"]
    commands:
      # wait for Kind cluster to be ready
      - until kubectl get serviceaccount default > /dev/null 2>&1; do echo "waiting for control-plane" && sleep 1; done
      - bats -t katalog/tests/tests.sh

  - name: Destroy Kind Cluster
    image: quay.io/sighup/dind-kind-kubectl-kustomize:0.24.0_1.30.5_4.5.2
    volumes:
      - name: dockersock
        path: /var/run/docker.sock
    environment:
      CLUSTER_NAME: ${DRONE_REPO_NAME}-${DRONE_BUILD_NUMBER}-131
    commands:
      # does not matter if the command fails
      - kind delete cluster --name $${CLUSTER_NAME} || true
    depends_on:
      - End-to-End Tests
    when:
      status:
        - success
        - failure

volumes:
  - name: dockersock
    host:
      path: /var/run/docker.sock
---
name: release
kind: pipeline
type: docker

clone:
  depth: 1

depends_on:
  - e2e-kubernetes-1.28
  - e2e-kubernetes-1.29
  - e2e-kubernetes-1.30
  - e2e-kubernetes-1.31

platform:
  os: linux
  arch: amd64

trigger:
  ref:
    include:
      - refs/tags/**

steps:
  - name: prepare-tar-gz
    image: alpine:latest
    pull: always
    depends_on: [clone]
    commands:
      - tar -zcvf fury-kubernetes-logging-${DRONE_TAG}.tar.gz katalog/ LICENSE README.md
    when:
      ref:
        include:
          - refs/tags/**

  - name: prepare-release-notes
    image: quay.io/sighup/fury-release-notes-plugin:3.7_2.8.4
    pull: always
    depends_on: [clone]
    settings:
      release_notes_file_path: release-notes.md
    when:
      ref:
        include:
          - refs/tags/**

  - name: publish-prerelease
    image: plugins/github-release
    pull: always
    depends_on:
      - prepare-tar-gz
      - prepare-release-notes
    settings:
      api_key:
        from_secret: github_token
      file_exists: overwrite
      files:
        - fury-kubernetes-logging-${DRONE_TAG}.tar.gz
      prerelease: true
      overwrite: true
      title: "Preview ${DRONE_TAG}"
      note: release-notes.md
      checksum:
        - md5
        - sha256
    when:
      ref:
        include:
          - refs/tags/v**-rc**

  - name: publish-stable
    image: plugins/github-release
    pull: always
    depends_on:
      - prepare-tar-gz
      - prepare-release-notes
    settings:
      api_key:
        from_secret: github_token
      file_exists: overwrite
      files:
        - fury-kubernetes-logging-${DRONE_TAG}.tar.gz
      prerelease: false
      overwrite: true
      title: "Release ${DRONE_TAG}"
      note: release-notes.md
      checksum:
        - md5
        - sha256
    when:
      ref:
        exclude:
          - refs/tags/v**-rc**
        include:
          - refs/tags/v**
